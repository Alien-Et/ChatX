plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "org.localsend.localsend_app"
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_20
        targetCompatibility JavaVersion.VERSION_20
    }

    kotlinOptions {
        jvmTarget = '20'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "org.chatx.chatx_app"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            def keystorePropertiesFile = rootProject.file('key.properties')
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            }

            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }
    
    // 解决Windows上的权限问题
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    
    // 确保构建目录在D盘
    buildDir = "D:/ChatX/app/build/app"
    
    // 指定APK输出目录到D盘
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputDir = file("D:/ChatX/app/build/apk/${variant.buildType.name}")
            if (!outputDir.exists()) {
                outputDir.mkdirs()
            }
            output.outputFileName = "ChatX-${variant.versionName}-${variant.buildType.name}.apk"
            output.outputFile = new File(outputDir, output.outputFileName)
        }
    }
}

flutter {
    source '../..'
}

// 创建临时目录
task createTempDirs {
    doLast {
        def tempDir = file("D:/ChatX/app/build/tmp")
        if (!tempDir.exists()) {
            tempDir.mkdirs()
        }
        def homeDir = file("D:/ChatX/app/build/home")
        if (!homeDir.exists()) {
            homeDir.mkdirs()
        }
        def gradleWorkDir = file("D:/ChatX/app/build/gradle-work")
        if (!gradleWorkDir.exists()) {
            gradleWorkDir.mkdirs()
        }
    }
}

// 在编译前创建临时目录
tasks.withType(JavaCompile) {
    dependsOn createTempDirs
}

// 为所有任务设置系统属性
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.fork = true
        options.forkOptions.jvmArgs = [
            '-Djava.io.tmpdir=D:/ChatX/app/build/tmp', 
            '-Duser.home=D:/ChatX/app/build/home',
            '--add-opens=java.base/java.io=ALL-UNNAMED',
            '--add-opens=java.base/java.lang=ALL-UNNAMED',
            '--add-opens=java.base/java.util=ALL-UNNAMED'
        ]
    }

    // 为所有任务设置系统属性
    tasks.all { task ->
        task.doFirst {
            System.setProperty("java.io.tmpdir", "D:/ChatX/app/build/tmp")
            System.setProperty("user.home", "D:/ChatX/app/build/home")
            System.setProperty("gradle.user.home", "D:/ChatX/app/android/.gradle")
            System.setProperty("gradle.workDir", "D:/ChatX/app/build/gradle-work")
        }
    }
}